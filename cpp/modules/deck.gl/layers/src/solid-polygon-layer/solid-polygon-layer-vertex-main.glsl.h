// Copyright (c) 2020 Unfolded, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef DECKGL_LAYERS_SOLID_POLYGON_LAYER_VERTEX_MAIN_H
#define DECKGL_LAYERS_SOLID_POLYGON_LAYER_VERTEX_MAIN_H

#include <string>

#include "deck.gl/core/src/shaderlib/project/project32.glsl.h"
#include "deck.gl/core/src/shaderlib/misc/geometry.glsl.h"

namespace {

// NOLINTNEXTLINE(runtime/string)
static const std::string solidPolygonLayerVSM = R"GLSL(
layout(std140, set = 0, binding = 1) uniform SolidPolygonLayerOptions {
  bool extruded;
  bool isWireframe;
  float elevationScale;
  float opacity;
} layerOptions;

layout(location = 0) in vec2 vertexPositions;
layout(location = 1) in float vertexValid;

layout(location = 0) out vec4 vColor;
layout(location = 1) out float isValid;

struct PolygonProps{
  vec4 fillColors;
  vec4 lineColors;
  vec3 positions;
  vec3 nextPositions;
  vec3 pickingColors;
  vec3 positions64Low;
  vec3 nextPositions64Low;
  float elevations;
}

vec3 project_offset_normal(vec3 vector) {
  if (project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
    project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT_OFFSETS) {
    // normals generated by the polygon tesselator are in lnglat offsets instead of meters
    return normalize(vector * project_uCommonUnitsPerWorldUnit);
  }
  return project_normal(vector);
}

void calculatePosition(PolygonProps props){
  vec3 pos;
  vec3 pos64Low;
  vec3 normal;
  vec4 colors = layerOptions.isWireframe ? props.lineColors : props.fillColors;
  
  geometry.worldPosition = props.positions;
  geometry.worldPositionAlt = props.nextPositions;
  geometry.pickingColor = props.pickingColors;

  #ifdef IS_SIDE_VERTEX
    pos = mix(props.positions, props.nextPositions, vertexPositions.x);
    pos64Low = mix(props.positions64Low, props.nextPositions64Low, vertexPositions.x);
    isValid = vertexValid;
  #else
    pos = props.positions;
    pos64Low = props.positions64Low;
    isValid = 1.0;
  #endif  
  
  if (layerOptions.extruded) {
    pos.z += props.elevations * vertexPositions.y * layerOptions.elevationScale;
    #ifdef IS_SIDE_VERTEX
      normal = vec3(props.positions.y - props.nextPositions.y, props.nextPositions.x - props.positions.x, 0.0);
      normal = project_offset_normal(normal);
    #else
      normal = vec3(0.0, 0.0, 1.0);
    #endif
    geometry.normal = normal;
  }

  gl_Position = project_position_to_clipspace(pos, pos64Low, vec3(0.), geometry.position);

  if (extruded) {
    vec3 lightColor = lighting_getLightColor(colors.rgb, project_uCameraPosition, geometry.position.xyz, normal);
    vec3 normalizedLightColor = clamp(lightColor, 0, 255) / 255.0;
    vec4 normalizedColors = clamp(colors, 0, 255) / 255.0;
    vColor = vec4(normalizedLightColor.rgb, normalizedColors.a * layerOptions.opacity);
  } else {
    vec4 normalizedColors = clamp(colors, 0, 255) / 255.0;
    vColor = vec4(normalizedColors.rgb, normalizedColors.a * layerOptions.opacity);
  }
}
)GLSL";

}  // anonymous namespace

// not sure that the following "vsm" definition is necessary - vs defined in side layer
// NOLINTNEXTLINE(runtime/string)
static const std::string vsm = "#version450\n" + geometryVS + "\n" + project32VS + "\n" + solidPolygonLayerVSM;

#endif  // DECKGL_LAYERS_SOLID_POLYGON_LAYER_VERTEX_MAIN_H
